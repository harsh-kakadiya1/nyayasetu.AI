import { GoogleGenerativeAI } from "@google/generative-ai";

// Debug API key loading
console.log('ЁЯФН Gemini API Key Status:', {
  present: !!process.env.GEMINI_API_KEY,
  length: process.env.GEMINI_API_KEY?.length || 0,
  startsWithAI: process.env.GEMINI_API_KEY?.startsWith('AIzaSy') || false
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

export interface DocumentSummary {
  summary: string;
  keyTerms: {
    employer?: string;
    employee?: string;
    salary?: string;
    startDate?: string;
    probation?: string;
  };
  documentType: string;
}

export interface RiskItem {
  level: "high" | "medium" | "low";
  title: string;
  description: string;
  section?: string;
}

export interface Clause {
  title: string;
  originalText: string;
  simplifiedText: string;
  section?: string;
}

export interface Recommendation {
  priority: number;
  title: string;
  description: string;
  actionType: "review" | "negotiate" | "legal" | "clarify";
}

export interface FullAnalysis {
  summary: DocumentSummary;
  riskItems: RiskItem[];
  clauses: Clause[];
  recommendations: Recommendation[];
  wordCount: number;
  riskLevel: "high" | "medium" | "low";
}

export async function analyzeDocument(content: string, documentType?: string, language: string = 'en'): Promise<FullAnalysis> {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
  
  const languageInstructions = {
    'en': 'Respond in English with clear, jargon-free explanations.',
    'hi': 'рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ рдФрд░ рдХрд╛рдиреВрдиреА рд╢рдмреНрджрдЬрд╛рд▓ рдХреЛ рд╕рд░рд▓ рднрд╛рд╖рд╛ рдореЗрдВ рд╕рдордЭрд╛рдПрдВред',
    'gu': 'ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ ркЕркирлЗ ркХрк╛ркирлВркирлА рк╢ркмрлНркжркЬрк╛рк│ркирлЗ рк╕рк░рк│ ркнрк╛рк╖рк╛ркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛред',
    'mr': 'рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛ рдЖрдгрд┐ рдХрд╛рдпрджреЗрд╢реАрд░ рд╢рдмреНрджрдЬрд╛рд▓ рд╕реЛрдкреНрдпрд╛ рднрд╛рд╖реЗрдд рд╕рдордЬрд╛рд╡реВрди рд╕рд╛рдВрдЧрд╛ред',
    'ta': 'родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН рооро▒рпНро▒рпБроорпН роЪроЯрпНроЯ ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ роОро│ро┐роп роорпКро┤ро┐ропро┐ро▓рпН ро╡ро┐ро│роХрпНроХро╡рпБроорпН.',
    'bn': 'ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи ржПржмржВ ржЖржЗржирж┐ ржкрж░рж┐ржнрж╛рж╖рж╛ржЧрзБрж▓рж┐ рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред'
  };
  
  const systemPrompt = `You are a legal document analysis expert. Analyze the provided legal document and provide a comprehensive breakdown in JSON format.

Your analysis should include:
1. A plain-language summary with key terms extracted
2. Risk assessment with specific items flagged by severity
3. Key clauses broken down with original and simplified text
4. Actionable recommendations prioritized by importance

Focus on:
- Clear, jargon-free explanations
- Identifying unusual or potentially problematic terms
- Providing practical, actionable advice
- Risk assessment using "high", "medium", "low" levels

Language Instructions: ${languageInstructions[language as keyof typeof languageInstructions] || languageInstructions['en']}

Document type context: ${documentType || "auto-detect"}

Respond with valid JSON matching this structure:
{
  "summary": {
    "summary": "string",
    "keyTerms": {
      "employer": "string",
      "employee": "string", 
      "salary": "string",
      "startDate": "string",
      "probation": "string"
    },
    "documentType": "string"
  },
  "riskItems": [
    {
      "level": "high|medium|low",
      "title": "string",
      "description": "string",
      "section": "string"
    }
  ],
  "clauses": [
    {
      "title": "string",
      "originalText": "string",
      "simplifiedText": "string",
      "section": "string"
    }
  ],
  "recommendations": [
    {
      "priority": number,
      "title": "string", 
      "description": "string",
      "actionType": "review|negotiate|legal|clarify"
    }
  ],
  "wordCount": number,
  "riskLevel": "high|medium|low"
}`;

  try {
    console.log('ЁЯЪА Starting Gemini analysis...');
    console.log('ЁЯУД Content length:', content.length);
    console.log('ЁЯМН Language:', language);
    
    // Retry logic for API overload
    const maxRetries = 3;
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`ЁЯУЮ Gemini API attempt ${attempt}/${maxRetries}`);
        
        const result = await model.generateContent({
          contents: [{ role: "user", parts: [{ text: `${systemPrompt}\n\nDocument to analyze:\n\n${content}` }] }],
          generationConfig: {
            responseMimeType: "application/json",
          },
        });

        console.log('тЬЕ Gemini API call successful');
        const response = await result.response;
        const analysisText = response.text();
        
        console.log('ЁЯУЭ Response length:', analysisText?.length || 0);
        
        if (!analysisText) {
          throw new Error("Empty response from Gemini API");
        }

        console.log('ЁЯФН Parsing JSON response...');
        const analysis: FullAnalysis = JSON.parse(analysisText);
        
        // Validate and ensure required fields
        if (!analysis.summary || !analysis.riskItems || !analysis.clauses || !analysis.recommendations) {
          console.error('тЭМ Invalid analysis structure:', {
            hasSummary: !!analysis.summary,
            hasRiskItems: !!analysis.riskItems,
            hasClauses: !!analysis.clauses,
            hasRecommendations: !!analysis.recommendations
          });
          throw new Error("Invalid analysis structure from Gemini API");
        }

        console.log('тЬЕ Analysis completed successfully');
        return analysis;
        
      } catch (apiError: any) {
        lastError = apiError;
        
        // Check if it's an overload error (503 Service Unavailable)
        if (apiError.message?.includes('overloaded') || apiError.message?.includes('503')) {
          console.warn(`тЪая╕П API overloaded on attempt ${attempt}/${maxRetries}`);
          
          if (attempt < maxRetries) {
            // Exponential backoff: 2s, 4s, 8s
            const delay = Math.pow(2, attempt) * 1000;
            console.log(`тП│ Waiting ${delay}ms before retry...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          }
        } else {
          // For non-overload errors, don't retry
          throw apiError;
        }
      }
    }
    
    // If we get here, all retries failed
    throw lastError || new Error("Failed to analyze document after multiple attempts");
    
  } catch (error) {
    console.error("тЭМ Gemini analysis error:", error);
    if (error instanceof SyntaxError) {
      console.error("ЁЯУЭ JSON Parse Error - Raw response:", error.message);
    }
    throw new Error(`Failed to analyze document: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

export async function answerQuestion(documentContent: string, question: string, previousContext?: string, language: string = 'en'): Promise<string> {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
  
  const languageInstructions = {
    'en': 'Respond in English with clear, accessible language.',
    'hi': 'рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ рдФрд░ рд╕реНрдкрд╖реНрдЯ, рд╕реБрд▓рдн рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред',
    'gu': 'ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ ркЬрк╡рк╛ркм ркЖрккрлЛ ркЕркирлЗ рк╕рлНрккрк╖рлНркЯ, рк╕рлБрк▓ркн ркнрк╛рк╖рк╛ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛред',
    'mr': 'рдорд░рд╛рдареАрдд рдЙрддреНрддрд░ рджреНрдпрд╛ рдЖрдгрд┐ рд╕реНрдкрд╖реНрдЯ, рд╕реБрд▓рдн рднрд╛рд╖реЗрдЪрд╛ рд╡рд╛рдкрд░ рдХрд░рд╛ред',
    'ta': 'родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН рооро▒рпНро▒рпБроорпН родрпЖро│ро┐ро╡ро╛рой, роЕрогрпБроХроХрпНроХрпВроЯро┐роп роорпКро┤ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.',
    'bn': 'ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи ржПржмржВ рж╕рзНржкрж╖рзНржЯ, рж╕рзБрж▓ржн ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред'
  };
  
  const systemPrompt = `You are a legal document assistant. Answer questions about the provided legal document using only the information contained within it.

Rules:
- Base your answers solely on the document content
- If information isn't in the document, clearly state that
- Provide specific references to sections or clauses when possible
- Use clear, accessible language
- Keep responses concise but comprehensive

Language Instructions: ${languageInstructions[language as keyof typeof languageInstructions] || languageInstructions['en']}

${previousContext ? `Previous conversation context:\n${previousContext}\n\n` : ''}

Document content:\n${documentContent}

Question: ${question}`;

  try {
    // Retry logic for API overload
    const maxRetries = 3;
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`ЁЯУЮ QA API attempt ${attempt}/${maxRetries}`);
        
        const result = await model.generateContent(systemPrompt);
        const response = await result.response;
        const answer = response.text();
        
        if (!answer) {
          throw new Error("Empty response from Gemini API");
        }

        console.log('тЬЕ QA response received successfully');
        return answer;
        
      } catch (apiError: any) {
        lastError = apiError;
        
        // Check if it's an overload error (503 Service Unavailable)
        if (apiError.message?.includes('overloaded') || apiError.message?.includes('503')) {
          console.warn(`тЪая╕П QA API overloaded on attempt ${attempt}/${maxRetries}`);
          
          if (attempt < maxRetries) {
            // Exponential backoff: 1s, 2s, 4s (shorter for QA)
            const delay = Math.pow(2, attempt - 1) * 1000;
            console.log(`тП│ Waiting ${delay}ms before QA retry...`);
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          }
        } else {
          // For non-overload errors, don't retry
          throw apiError;
        }
      }
    }
    
    // If we get here, all retries failed
    throw lastError || new Error("Failed to answer question after multiple attempts");
    
  } catch (error) {
    console.error("Gemini Q&A error:", error);
    throw new Error(`Failed to answer question: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}
